'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),
 Global.System.ComponentModel.ToolboxItem(True),
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),
 Global.System.Xml.Serialization.XmlRootAttribute("HospitalDataSet1"),
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>
Partial Public Class HospitalDataSet1
    Inherits Global.System.Data.DataSet

    Private tablePatients As PatientsDataTable

    Private tableUsers As UsersDataTable

    Private tableDoctor As DoctorDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Patients")) Is Nothing) Then
                MyBase.Tables.Add(New PatientsDataTable(ds.Tables("Patients")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Doctor")) Is Nothing) Then
                MyBase.Tables.Add(New DoctorDataTable(ds.Tables("Doctor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property Patients() As PatientsDataTable
        Get
            Return Me.tablePatients
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property Users() As UsersDataTable
        Get
            Return Me.tableUsers
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False),
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>
    Public ReadOnly Property Doctor() As DoctorDataTable
        Get
            Return Me.tableDoctor
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.BrowsableAttribute(True),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass()
        Me.EndInit
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As HospitalDataSet1 = CType(MyBase.Clone, HospitalDataSet1)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Patients")) Is Nothing) Then
                MyBase.Tables.Add(New PatientsDataTable(ds.Tables("Patients")))
            End If
            If (Not (ds.Tables("Users")) Is Nothing) Then
                MyBase.Tables.Add(New UsersDataTable(ds.Tables("Users")))
            End If
            If (Not (ds.Tables("Doctor")) Is Nothing) Then
                MyBase.Tables.Add(New DoctorDataTable(ds.Tables("Doctor")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablePatients = CType(MyBase.Tables("Patients"), PatientsDataTable)
        If (initTable = True) Then
            If (Not (Me.tablePatients) Is Nothing) Then
                Me.tablePatients.InitVars()
            End If
        End If
        Me.tableUsers = CType(MyBase.Tables("Users"), UsersDataTable)
        If (initTable = True) Then
            If (Not (Me.tableUsers) Is Nothing) Then
                Me.tableUsers.InitVars()
            End If
        End If
        Me.tableDoctor = CType(MyBase.Tables("Doctor"), DoctorDataTable)
        If (initTable = True) Then
            If (Not (Me.tableDoctor) Is Nothing) Then
                Me.tableDoctor.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitClass()
        Me.Prefix = ""
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablePatients = New PatientsDataTable()
        MyBase.Tables.Add(Me.tablePatients)
        Me.tableUsers = New UsersDataTable()
        MyBase.Tables.Add(Me.tableUsers)
        Me.tableDoctor = New DoctorDataTable()
        MyBase.Tables.Add(Me.tableDoctor)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializePatients() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeUsers() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function ShouldSerializeDoctor() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As HospitalDataSet1 = New HospitalDataSet1()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub PatientsRowChangeEventHandler(ByVal sender As Object, ByVal e As PatientsRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub UsersRowChangeEventHandler(ByVal sender As Object, ByVal e As UsersRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Delegate Sub DoctorRowChangeEventHandler(ByVal sender As Object, ByVal e As DoctorRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class PatientsDataTable
        Inherits Global.System.Data.TypedTableBase(Of PatientsRow)

        Private columnPatientID As Global.System.Data.DataColumn

        Private columnPatientName As Global.System.Data.DataColumn

        Private columnGender As Global.System.Data.DataColumn

        Private columnAge As Global.System.Data.DataColumn

        Private columnAddress As Global.System.Data.DataColumn

        Private columnContactNumber As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "Patients"
            Me.BeginInit
            Me.InitClass()
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property PatientIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property PatientNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPatientName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ContactNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactNumber
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As PatientsRow
            Get
                Return CType(Me.Rows(index), PatientsRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event PatientsRowChanging As PatientsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event PatientsRowChanged As PatientsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event PatientsRowDeleting As PatientsRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event PatientsRowDeleted As PatientsRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddPatientsRow(ByVal row As PatientsRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddPatientsRow(ByVal PatientName As String, ByVal Gender As String, ByVal Age As Integer, ByVal Address As String, ByVal ContactNumber As String) As PatientsRow
            Dim rowPatientsRow As PatientsRow = CType(Me.NewRow, PatientsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, PatientName, Gender, Age, Address, ContactNumber}
            rowPatientsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPatientsRow)
            Return rowPatientsRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByPatientID(ByVal PatientID As Integer) As PatientsRow
            Return CType(Me.Rows.Find(New Object() {PatientID}), PatientsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PatientsDataTable = CType(MyBase.Clone, PatientsDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PatientsDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnPatientID = MyBase.Columns("PatientID")
            Me.columnPatientName = MyBase.Columns("PatientName")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnAddress = MyBase.Columns("Address")
            Me.columnContactNumber = MyBase.Columns("ContactNumber")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnPatientID = New Global.System.Data.DataColumn("PatientID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientID)
            Me.columnPatientName = New Global.System.Data.DataColumn("PatientName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPatientName)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnAddress = New Global.System.Data.DataColumn("Address", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAddress)
            Me.columnContactNumber = New Global.System.Data.DataColumn("ContactNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactNumber)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPatientID}, True))
            Me.columnPatientID.AutoIncrement = True
            Me.columnPatientID.AutoIncrementSeed = -1
            Me.columnPatientID.AutoIncrementStep = -1
            Me.columnPatientID.AllowDBNull = False
            Me.columnPatientID.ReadOnly = True
            Me.columnPatientID.Unique = True
            Me.columnPatientName.AllowDBNull = False
            Me.columnPatientName.MaxLength = 100
            Me.columnGender.AllowDBNull = False
            Me.columnGender.MaxLength = 10
            Me.columnAge.AllowDBNull = False
            Me.columnAddress.AllowDBNull = False
            Me.columnAddress.MaxLength = 200
            Me.columnContactNumber.AllowDBNull = False
            Me.columnContactNumber.MaxLength = 20
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewPatientsRow() As PatientsRow
            Return CType(Me.NewRow, PatientsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PatientsRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PatientsRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PatientsRowChangedEvent) Is Nothing) Then
                RaiseEvent PatientsRowChanged(Me, New PatientsRowChangeEvent(CType(e.Row, PatientsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PatientsRowChangingEvent) Is Nothing) Then
                RaiseEvent PatientsRowChanging(Me, New PatientsRowChangeEvent(CType(e.Row, PatientsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PatientsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PatientsRowDeleted(Me, New PatientsRowChangeEvent(CType(e.Row, PatientsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PatientsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PatientsRowDeleting(Me, New PatientsRowChangeEvent(CType(e.Row, PatientsRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemovePatientsRow(ByVal row As PatientsRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HospitalDataSet1 = New HospitalDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PatientsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class UsersDataTable
        Inherits Global.System.Data.TypedTableBase(Of UsersRow)

        Private columnUserID As Global.System.Data.DataColumn

        Private columnUsername As Global.System.Data.DataColumn

        Private columnPassword As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "Users"
            Me.BeginInit
            Me.InitClass()
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property UserIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As UsersRow
            Get
                Return CType(Me.Rows(index), UsersRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event UsersRowChanging As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event UsersRowChanged As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event UsersRowDeleting As UsersRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event UsersRowDeleted As UsersRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddUsersRow(ByVal row As UsersRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddUsersRow(ByVal Username As String, ByVal Password As String) As UsersRow
            Dim rowUsersRow As UsersRow = CType(Me.NewRow, UsersRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Username, Password}
            rowUsersRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUsersRow)
            Return rowUsersRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByUserID(ByVal UserID As Integer) As UsersRow
            Return CType(Me.Rows.Find(New Object() {UserID}), UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UsersDataTable = CType(MyBase.Clone, UsersDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UsersDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnUserID = MyBase.Columns("UserID")
            Me.columnUsername = MyBase.Columns("Username")
            Me.columnPassword = MyBase.Columns("Password")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnUserID = New Global.System.Data.DataColumn("UserID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserID)
            Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsername)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnUserID}, True))
            Me.columnUserID.AutoIncrement = True
            Me.columnUserID.AutoIncrementSeed = -1
            Me.columnUserID.AutoIncrementStep = -1
            Me.columnUserID.AllowDBNull = False
            Me.columnUserID.ReadOnly = True
            Me.columnUserID.Unique = True
            Me.columnUsername.AllowDBNull = False
            Me.columnUsername.MaxLength = 50
            Me.columnPassword.AllowDBNull = False
            Me.columnPassword.MaxLength = 50
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewUsersRow() As UsersRow
            Return CType(Me.NewRow, UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UsersRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UsersRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UsersRowChangedEvent) Is Nothing) Then
                RaiseEvent UsersRowChanged(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UsersRowChangingEvent) Is Nothing) Then
                RaiseEvent UsersRowChanging(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UsersRowDeletedEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleted(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UsersRowDeletingEvent) Is Nothing) Then
                RaiseEvent UsersRowDeleting(Me, New UsersRowChangeEvent(CType(e.Row, UsersRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveUsersRow(ByVal row As UsersRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HospitalDataSet1 = New HospitalDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UsersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>
    Partial Public Class DoctorDataTable
        Inherits Global.System.Data.TypedTableBase(Of DoctorRow)

        Private columnDocID As Global.System.Data.DataColumn

        Private columnDocName As Global.System.Data.DataColumn

        Private columnGender As Global.System.Data.DataColumn

        Private columnSpecialisation As Global.System.Data.DataColumn

        Private columnQualification As Global.System.Data.DataColumn

        Private columnAge As Global.System.Data.DataColumn

        Private columnContactNumber As Global.System.Data.DataColumn

        Private columnEmailID As Global.System.Data.DataColumn

        Private columnSalary As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New()
            MyBase.New
            Me.TableName = "Doctor"
            Me.BeginInit
            Me.InitClass()
            Me.EndInit
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property DocIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property DocNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocName
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property GenderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGender
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SpecialisationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialisation
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property QualificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualification
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property ContactNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactNumber
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property EmailIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailID
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property SalaryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalary
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
         Global.System.ComponentModel.Browsable(False)>
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Default Public ReadOnly Property Item(ByVal index As Integer) As DoctorRow
            Get
                Return CType(Me.Rows(index), DoctorRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event DoctorRowChanging As DoctorRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event DoctorRowChanged As DoctorRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event DoctorRowDeleting As DoctorRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Event DoctorRowDeleted As DoctorRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Sub AddDoctorRow(ByVal row As DoctorRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overloads Function AddDoctorRow(ByVal DocName As String, ByVal Gender As String, ByVal Specialisation As String, ByVal Qualification As String, ByVal Age As Integer, ByVal ContactNumber As String, ByVal EmailID As String, ByVal Salary As Decimal) As DoctorRow
            Dim rowDoctorRow As DoctorRow = CType(Me.NewRow, DoctorRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, DocName, Gender, Specialisation, Qualification, Age, ContactNumber, EmailID, Salary}
            rowDoctorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDoctorRow)
            Return rowDoctorRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function FindByDocID(ByVal DocID As Integer) As DoctorRow
            Return CType(Me.Rows.Find(New Object() {DocID}), DoctorRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DoctorDataTable = CType(MyBase.Clone, DoctorDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DoctorDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub InitVars()
            Me.columnDocID = MyBase.Columns("DocID")
            Me.columnDocName = MyBase.Columns("DocName")
            Me.columnGender = MyBase.Columns("Gender")
            Me.columnSpecialisation = MyBase.Columns("Specialisation")
            Me.columnQualification = MyBase.Columns("Qualification")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnContactNumber = MyBase.Columns("ContactNumber")
            Me.columnEmailID = MyBase.Columns("EmailID")
            Me.columnSalary = MyBase.Columns("Salary")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Sub InitClass()
            Me.columnDocID = New Global.System.Data.DataColumn("DocID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocID)
            Me.columnDocName = New Global.System.Data.DataColumn("DocName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocName)
            Me.columnGender = New Global.System.Data.DataColumn("Gender", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGender)
            Me.columnSpecialisation = New Global.System.Data.DataColumn("Specialisation", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialisation)
            Me.columnQualification = New Global.System.Data.DataColumn("Qualification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualification)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnContactNumber = New Global.System.Data.DataColumn("ContactNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactNumber)
            Me.columnEmailID = New Global.System.Data.DataColumn("EmailID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailID)
            Me.columnSalary = New Global.System.Data.DataColumn("Salary", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalary)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDocID}, True))
            Me.columnDocID.AutoIncrement = True
            Me.columnDocID.AutoIncrementSeed = -1
            Me.columnDocID.AutoIncrementStep = -1
            Me.columnDocID.AllowDBNull = False
            Me.columnDocID.ReadOnly = True
            Me.columnDocID.Unique = True
            Me.columnDocName.AllowDBNull = False
            Me.columnDocName.MaxLength = 100
            Me.columnGender.AllowDBNull = False
            Me.columnGender.MaxLength = 10
            Me.columnSpecialisation.AllowDBNull = False
            Me.columnSpecialisation.MaxLength = 100
            Me.columnQualification.AllowDBNull = False
            Me.columnQualification.MaxLength = 100
            Me.columnAge.AllowDBNull = False
            Me.columnContactNumber.AllowDBNull = False
            Me.columnContactNumber.MaxLength = 20
            Me.columnEmailID.AllowDBNull = False
            Me.columnEmailID.MaxLength = 50
            Me.columnSalary.AllowDBNull = False
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function NewDoctorRow() As DoctorRow
            Return CType(Me.NewRow, DoctorRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DoctorRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DoctorRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DoctorRowChangedEvent) Is Nothing) Then
                RaiseEvent DoctorRowChanged(Me, New DoctorRowChangeEvent(CType(e.Row, DoctorRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DoctorRowChangingEvent) Is Nothing) Then
                RaiseEvent DoctorRowChanging(Me, New DoctorRowChangeEvent(CType(e.Row, DoctorRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DoctorRowDeletedEvent) Is Nothing) Then
                RaiseEvent DoctorRowDeleted(Me, New DoctorRowChangeEvent(CType(e.Row, DoctorRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DoctorRowDeletingEvent) Is Nothing) Then
                RaiseEvent DoctorRowDeleting(Me, New DoctorRowChangeEvent(CType(e.Row, DoctorRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub RemoveDoctorRow(ByVal row As DoctorRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HospitalDataSet1 = New HospitalDataSet1()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DoctorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PatientsRow
        Inherits Global.System.Data.DataRow

        Private tablePatients As PatientsDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePatients = CType(Me.Table, PatientsDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property PatientID() As Integer
            Get
                Return CType(Me(Me.tablePatients.PatientIDColumn), Integer)
            End Get
            Set
                Me(Me.tablePatients.PatientIDColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property PatientName() As String
            Get
                Return CType(Me(Me.tablePatients.PatientNameColumn), String)
            End Get
            Set
                Me(Me.tablePatients.PatientNameColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Gender() As String
            Get
                Return CType(Me(Me.tablePatients.GenderColumn), String)
            End Get
            Set
                Me(Me.tablePatients.GenderColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Age() As Integer
            Get
                Return CType(Me(Me.tablePatients.AgeColumn), Integer)
            End Get
            Set
                Me(Me.tablePatients.AgeColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Address() As String
            Get
                Return CType(Me(Me.tablePatients.AddressColumn), String)
            End Get
            Set
                Me(Me.tablePatients.AddressColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ContactNumber() As String
            Get
                Return CType(Me(Me.tablePatients.ContactNumberColumn), String)
            End Get
            Set
                Me(Me.tablePatients.ContactNumberColumn) = Value
            End Set
        End Property
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class UsersRow
        Inherits Global.System.Data.DataRow

        Private tableUsers As UsersDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUsers = CType(Me.Table, UsersDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property UserID() As Integer
            Get
                Return CType(Me(Me.tableUsers.UserIDColumn), Integer)
            End Get
            Set
                Me(Me.tableUsers.UserIDColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Username() As String
            Get
                Return CType(Me(Me.tableUsers.UsernameColumn), String)
            End Get
            Set
                Me(Me.tableUsers.UsernameColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Password() As String
            Get
                Return CType(Me(Me.tableUsers.PasswordColumn), String)
            End Get
            Set
                Me(Me.tableUsers.PasswordColumn) = Value
            End Set
        End Property
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class DoctorRow
        Inherits Global.System.Data.DataRow

        Private tableDoctor As DoctorDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDoctor = CType(Me.Table, DoctorDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property DocID() As Integer
            Get
                Return CType(Me(Me.tableDoctor.DocIDColumn), Integer)
            End Get
            Set
                Me(Me.tableDoctor.DocIDColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property DocName() As String
            Get
                Return CType(Me(Me.tableDoctor.DocNameColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.DocNameColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Gender() As String
            Get
                Return CType(Me(Me.tableDoctor.GenderColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.GenderColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Specialisation() As String
            Get
                Return CType(Me(Me.tableDoctor.SpecialisationColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.SpecialisationColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Qualification() As String
            Get
                Return CType(Me(Me.tableDoctor.QualificationColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.QualificationColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Age() As Integer
            Get
                Return CType(Me(Me.tableDoctor.AgeColumn), Integer)
            End Get
            Set
                Me(Me.tableDoctor.AgeColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property ContactNumber() As String
            Get
                Return CType(Me(Me.tableDoctor.ContactNumberColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.ContactNumberColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property EmailID() As String
            Get
                Return CType(Me(Me.tableDoctor.EmailIDColumn), String)
            End Get
            Set
                Me(Me.tableDoctor.EmailIDColumn) = Value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Property Salary() As Decimal
            Get
                Return CType(Me(Me.tableDoctor.SalaryColumn), Decimal)
            End Get
            Set
                Me(Me.tableDoctor.SalaryColumn) = Value
            End Set
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class PatientsRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As PatientsRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As PatientsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As PatientsRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class UsersRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As UsersRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As UsersRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As UsersRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Class DoctorRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As DoctorRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Sub New(ByVal row As DoctorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Row() As DoctorRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class


'''<summary>
'''Represents the connection and commands used to retrieve and save data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),
 Global.System.ComponentModel.ToolboxItem(True),
 Global.System.ComponentModel.DataObjectAttribute(True),
 Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
    ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
Partial Public Class PatientsTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Sub New()
        MyBase.New
        Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
        Get
            If (Me._adapter Is Nothing) Then
                Me.InitAdapter()
            End If
            Return Me._adapter
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
        Get
            If (Me._connection Is Nothing) Then
                Me.InitConnection()
            End If
            Return Me._connection
        End Get
        Set
            Me._connection = Value
            If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                Me.Adapter.InsertCommand.Connection = Value
            End If
            If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                Me.Adapter.DeleteCommand.Connection = Value
            End If
            If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                Me.Adapter.UpdateCommand.Connection = Value
            End If
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (Not (Me.CommandCollection(i)) Is Nothing) Then
                    CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                End If
                i = (i + 1)
            Loop
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
        Get
            Return Me._transaction
        End Get
        Set
            Me._transaction = Value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                Me.CommandCollection(i).Transaction = Me._transaction
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                Me.Adapter.DeleteCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                Me.Adapter.InsertCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                Me.Adapter.UpdateCommand.Transaction = Me._transaction
            End If
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
        Get
            If (Me._commandCollection Is Nothing) Then
                Me.InitCommandCollection()
            End If
            Return Me._commandCollection
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me._clearBeforeFill
        End Get
        Set
            Me._clearBeforeFill = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitAdapter()
        Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
        Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Patients"
        tableMapping.ColumnMappings.Add("PatientID", "PatientID")
        tableMapping.ColumnMappings.Add("PatientName", "PatientName")
        tableMapping.ColumnMappings.Add("Gender", "Gender")
        tableMapping.ColumnMappings.Add("Age", "Age")
        tableMapping.ColumnMappings.Add("Address", "Address")
        tableMapping.ColumnMappings.Add("ContactNumber", "ContactNumber")
        Me._adapter.TableMappings.Add(tableMapping)
        Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.DeleteCommand.Connection = Me.Connection
        Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Patients] WHERE (([PatientID] = @Original_PatientID) AND ([Pat" &
            "ientName] = @Original_PatientName) AND ([Gender] = @Original_Gender) AND ([Age] " &
            "= @Original_Age) AND ([Address] = @Original_Address) AND ([ContactNumber] = @Ori" &
            "ginal_ContactNumber))"
        Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.InsertCommand.Connection = Me.Connection
        Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Patients] ([PatientName], [Gender], [Age], [Address], [Contact" &
            "Number]) VALUES (@PatientName, @Gender, @Age, @Address, @ContactNumber);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT" &
            " PatientID, PatientName, Gender, Age, Address, ContactNumber FROM Patients WHERE" &
            " (PatientID = SCOPE_IDENTITY())"
        Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.UpdateCommand.Connection = Me.Connection
        Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Patients] SET [PatientName] = @PatientName, [Gender] = @Gender, [Ag" &
            "e] = @Age, [Address] = @Address, [ContactNumber] = @ContactNumber WHERE (([Patie" &
            "ntID] = @Original_PatientID) AND ([PatientName] = @Original_PatientName) AND ([G" &
            "ender] = @Original_Gender) AND ([Age] = @Original_Age) AND ([Address] = @Origina" &
            "l_Address) AND ([ContactNumber] = @Original_ContactNumber));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT PatientID, " &
            "PatientName, Gender, Age, Address, ContactNumber FROM Patients WHERE (PatientID " &
            "= @PatientID)"
        Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PatientName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Address", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Address", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PatientID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "PatientID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitConnection()
        Me._connection = New Global.System.Data.SqlClient.SqlConnection()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitCommandCollection()
        Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
        Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
        Me._commandCollection(0).Connection = Me.Connection
        Me._commandCollection(0).CommandText = "SELECT PatientID, PatientName, Gender, Age, Address, ContactNumber FROM dbo.Patie" &
            "nts"
        Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
    Public Overridable Overloads Function Fill(ByVal dataTable As HospitalDataSet1.PatientsDataTable) As Integer
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        If (Me.ClearBeforeFill = True) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
    Public Overridable Overloads Function GetData() As HospitalDataSet1.PatientsDataTable
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        Dim dataTable As HospitalDataSet1.PatientsDataTable = New HospitalDataSet1.PatientsDataTable()
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataTable As HospitalDataSet1.PatientsDataTable) As Integer
        Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataSet As HospitalDataSet1) As Integer
        Return Me.Adapter.Update(dataSet, "Patients")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
    Public Overridable Overloads Function Delete(ByVal Original_PatientID As Integer, ByVal Original_PatientName As String, ByVal Original_Gender As String, ByVal Original_Age As Integer, ByVal Original_Address As String, ByVal Original_ContactNumber As String) As Integer
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PatientID, Integer)
        If (Original_PatientName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_PatientName")
        Else
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PatientName, String)
        End If
        If (Original_Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Gender")
        Else
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Gender, String)
        End If
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Age, Integer)
        If (Original_Address Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Address")
        Else
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Address, String)
        End If
        If (Original_ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_ContactNumber")
        Else
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ContactNumber, String)
        End If
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
        If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.DeleteCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.DeleteCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
    Public Overridable Overloads Function Insert(ByVal PatientName As String, ByVal Gender As String, ByVal Age As Integer, ByVal Address As String, ByVal ContactNumber As String) As Integer
        If (PatientName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("PatientName")
        Else
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(PatientName, String)
        End If
        If (Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Gender")
        Else
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Gender, String)
        End If
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(Age, Integer)
        If (Address Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Address")
        Else
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Address, String)
        End If
        If (ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("ContactNumber")
        Else
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(ContactNumber, String)
        End If
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
        If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.InsertCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.InsertCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(ByVal PatientName As String, ByVal Gender As String, ByVal Age As Integer, ByVal Address As String, ByVal ContactNumber As String, ByVal Original_PatientID As Integer, ByVal Original_PatientName As String, ByVal Original_Gender As String, ByVal Original_Age As Integer, ByVal Original_Address As String, ByVal Original_ContactNumber As String, ByVal PatientID As Integer) As Integer
        If (PatientName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("PatientName")
        Else
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PatientName, String)
        End If
        If (Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Gender")
        Else
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Gender, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Age, Integer)
        If (Address Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Address")
        Else
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Address, String)
        End If
        If (ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("ContactNumber")
        Else
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ContactNumber, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PatientID, Integer)
        If (Original_PatientName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_PatientName")
        Else
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PatientName, String)
        End If
        If (Original_Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Gender")
        Else
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Gender, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Age, Integer)
        If (Original_Address Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Address")
        Else
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_Address, String)
        End If
        If (Original_ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_ContactNumber")
        Else
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ContactNumber, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(11).Value = CType(PatientID, Integer)
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
        If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.UpdateCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.UpdateCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(ByVal PatientName As String, ByVal Gender As String, ByVal Age As Integer, ByVal Address As String, ByVal ContactNumber As String, ByVal Original_PatientID As Integer, ByVal Original_PatientName As String, ByVal Original_Gender As String, ByVal Original_Age As Integer, ByVal Original_Address As String, ByVal Original_ContactNumber As String) As Integer
        Return Me.Update(PatientName, Gender, Age, Address, ContactNumber, Original_PatientID, Original_PatientName, Original_Gender, Original_Age, Original_Address, Original_ContactNumber, Original_PatientID)
    End Function
End Class

'''<summary>
'''Represents the connection and commands used to retrieve and save data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),
 Global.System.ComponentModel.ToolboxItem(True),
 Global.System.ComponentModel.DataObjectAttribute(True),
 Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
    ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
Partial Public Class UsersTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Sub New()
        MyBase.New
        Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
        Get
            If (Me._adapter Is Nothing) Then
                Me.InitAdapter()
            End If
            Return Me._adapter
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
        Get
            If (Me._connection Is Nothing) Then
                Me.InitConnection()
            End If
            Return Me._connection
        End Get
        Set
            Me._connection = Value
            If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                Me.Adapter.InsertCommand.Connection = Value
            End If
            If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                Me.Adapter.DeleteCommand.Connection = Value
            End If
            If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                Me.Adapter.UpdateCommand.Connection = Value
            End If
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (Not (Me.CommandCollection(i)) Is Nothing) Then
                    CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                End If
                i = (i + 1)
            Loop
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
        Get
            Return Me._transaction
        End Get
        Set
            Me._transaction = Value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                Me.CommandCollection(i).Transaction = Me._transaction
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                Me.Adapter.DeleteCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                Me.Adapter.InsertCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                Me.Adapter.UpdateCommand.Transaction = Me._transaction
            End If
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
        Get
            If (Me._commandCollection Is Nothing) Then
                Me.InitCommandCollection()
            End If
            Return Me._commandCollection
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me._clearBeforeFill
        End Get
        Set
            Me._clearBeforeFill = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitAdapter()
        Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
        Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Users"
        tableMapping.ColumnMappings.Add("UserID", "UserID")
        tableMapping.ColumnMappings.Add("Username", "Username")
        tableMapping.ColumnMappings.Add("Password", "Password")
        Me._adapter.TableMappings.Add(tableMapping)
        Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.DeleteCommand.Connection = Me.Connection
        Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([UserID] = @Original_UserID) AND ([Username] = " &
            "@Original_Username) AND ([Password] = @Original_Password))"
        Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.InsertCommand.Connection = Me.Connection
        Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([Username], [Password]) VALUES (@Username, @Password);" &
            "" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT UserID, Username, Password FROM Users WHERE (UserID = SCOPE_IDENTITY())" &
            ""
        Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.UpdateCommand.Connection = Me.Connection
        Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users] SET [Username] = @Username, [Password] = @Password WHERE (([" &
            "UserID] = @Original_UserID) AND ([Username] = @Original_Username) AND ([Password" &
            "] = @Original_Password));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT UserID, Username, Password FROM Users WHERE (U" &
            "serID = @UserID)"
        Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_UserID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Username", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UserID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "UserID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitConnection()
        Me._connection = New Global.System.Data.SqlClient.SqlConnection()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitCommandCollection()
        Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
        Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
        Me._commandCollection(0).Connection = Me.Connection
        Me._commandCollection(0).CommandText = "SELECT UserID, Username, Password FROM dbo.Users"
        Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
    Public Overridable Overloads Function Fill(ByVal dataTable As HospitalDataSet1.UsersDataTable) As Integer
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        If (Me.ClearBeforeFill = True) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
    Public Overridable Overloads Function GetData() As HospitalDataSet1.UsersDataTable
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        Dim dataTable As HospitalDataSet1.UsersDataTable = New HospitalDataSet1.UsersDataTable()
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataTable As HospitalDataSet1.UsersDataTable) As Integer
        Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataSet As HospitalDataSet1) As Integer
        Return Me.Adapter.Update(dataSet, "Users")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
    Public Overridable Overloads Function Delete(ByVal Original_UserID As Integer, ByVal Original_Username As String, ByVal Original_Password As String) As Integer
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_UserID, Integer)
        If (Original_Username Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Username")
        Else
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Username, String)
        End If
        If (Original_Password Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Password")
        Else
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Password, String)
        End If
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
        If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.DeleteCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.DeleteCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
    Public Overridable Overloads Function Insert(ByVal Username As String, ByVal Password As String) As Integer
        If (Username Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Username")
        Else
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Username, String)
        End If
        If (Password Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Password")
        Else
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Password, String)
        End If
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
        If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.InsertCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.InsertCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(ByVal Username As String, ByVal Password As String, ByVal Original_UserID As Integer, ByVal Original_Username As String, ByVal Original_Password As String, ByVal UserID As Integer) As Integer
        If (Username Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Username")
        Else
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Username, String)
        End If
        If (Password Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Password")
        Else
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Password, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_UserID, Integer)
        If (Original_Username Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Username")
        Else
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Username, String)
        End If
        If (Original_Password Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Password")
        Else
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_Password, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(UserID, Integer)
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
        If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.UpdateCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.UpdateCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(ByVal Username As String, ByVal Password As String, ByVal Original_UserID As Integer, ByVal Original_Username As String, ByVal Original_Password As String) As Integer
        Return Me.Update(Username, Password, Original_UserID, Original_Username, Original_Password, Original_UserID)
    End Function
End Class

'''<summary>
'''Represents the connection and commands used to retrieve and save data.
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),
 Global.System.ComponentModel.ToolboxItem(True),
 Global.System.ComponentModel.DataObjectAttribute(True),
 Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" &
    ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
Partial Public Class DoctorTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

    Private _connection As Global.System.Data.SqlClient.SqlConnection

    Private _transaction As Global.System.Data.SqlClient.SqlTransaction

    Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Sub New()
        MyBase.New
        Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
        Get
            If (Me._adapter Is Nothing) Then
                Me.InitAdapter()
            End If
            Return Me._adapter
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
        Get
            If (Me._connection Is Nothing) Then
                Me.InitConnection()
            End If
            Return Me._connection
        End Get
        Set
            Me._connection = Value
            If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                Me.Adapter.InsertCommand.Connection = Value
            End If
            If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                Me.Adapter.DeleteCommand.Connection = Value
            End If
            If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                Me.Adapter.UpdateCommand.Connection = Value
            End If
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                If (Not (Me.CommandCollection(i)) Is Nothing) Then
                    CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = Value
                End If
                i = (i + 1)
            Loop
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
        Get
            Return Me._transaction
        End Get
        Set
            Me._transaction = Value
            Dim i As Integer = 0
            Do While (i < Me.CommandCollection.Length)
                Me.CommandCollection(i).Transaction = Me._transaction
                i = (i + 1)
            Loop
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                Me.Adapter.DeleteCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                Me.Adapter.InsertCommand.Transaction = Me._transaction
            End If
            If ((Not (Me.Adapter) Is Nothing) _
                        AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                Me.Adapter.UpdateCommand.Transaction = Me._transaction
            End If
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
        Get
            If (Me._commandCollection Is Nothing) Then
                Me.InitCommandCollection()
            End If
            Return Me._commandCollection
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Property ClearBeforeFill() As Boolean
        Get
            Return Me._clearBeforeFill
        End Get
        Set
            Me._clearBeforeFill = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitAdapter()
        Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
        Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
        tableMapping.SourceTable = "Table"
        tableMapping.DataSetTable = "Doctor"
        tableMapping.ColumnMappings.Add("DocID", "DocID")
        tableMapping.ColumnMappings.Add("DocName", "DocName")
        tableMapping.ColumnMappings.Add("Gender", "Gender")
        tableMapping.ColumnMappings.Add("Specialisation", "Specialisation")
        tableMapping.ColumnMappings.Add("Qualification", "Qualification")
        tableMapping.ColumnMappings.Add("Age", "Age")
        tableMapping.ColumnMappings.Add("ContactNumber", "ContactNumber")
        tableMapping.ColumnMappings.Add("EmailID", "EmailID")
        tableMapping.ColumnMappings.Add("Salary", "Salary")
        Me._adapter.TableMappings.Add(tableMapping)
        Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.DeleteCommand.Connection = Me.Connection
        Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Doctor] WHERE (([DocID] = @Original_DocID) AND ([DocName] = @Origina" &
            "l_DocName) AND ([Gender] = @Original_Gender) AND ([Specialisation] = @Original_S" &
            "pecialisation) AND ([Qualification] = @Original_Qualification) AND ([Age] = @Ori" &
            "ginal_Age) AND ([ContactNumber] = @Original_ContactNumber) AND ([EmailID] = @Ori" &
            "ginal_EmailID) AND ([Salary] = @Original_Salary))"
        Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Specialisation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialisation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qualification", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qualification", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Salary", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 0, "Salary", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.InsertCommand.Connection = Me.Connection
        Me._adapter.InsertCommand.CommandText = "INSERT INTO [Doctor] ([DocName], [Gender], [Specialisation], [Qualification], [Ag" &
            "e], [ContactNumber], [EmailID], [Salary]) VALUES (@DocName, @Gender, @Specialisa" &
            "tion, @Qualification, @Age, @ContactNumber, @EmailID, @Salary);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DocID, D" &
            "ocName, Gender, Specialisation, Qualification, Age, ContactNumber, EmailID, Sala" &
            "ry FROM Doctor WHERE (DocID = SCOPE_IDENTITY())"
        Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Specialisation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialisation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qualification", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qualification", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 0, "Salary", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
        Me._adapter.UpdateCommand.Connection = Me.Connection
        Me._adapter.UpdateCommand.CommandText = "UPDATE [Doctor] SET [DocName] = @DocName, [Gender] = @Gender, [Specialisation] = " &
            "@Specialisation, [Qualification] = @Qualification, [Age] = @Age, [ContactNumber]" &
            " = @ContactNumber, [EmailID] = @EmailID, [Salary] = @Salary WHERE (([DocID] = @O" &
            "riginal_DocID) AND ([DocName] = @Original_DocName) AND ([Gender] = @Original_Gen" &
            "der) AND ([Specialisation] = @Original_Specialisation) AND ([Qualification] = @O" &
            "riginal_Qualification) AND ([Age] = @Original_Age) AND ([ContactNumber] = @Origi" &
            "nal_ContactNumber) AND ([EmailID] = @Original_EmailID) AND ([Salary] = @Original" &
            "_Salary));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT DocID, DocName, Gender, Specialisation, Qualification, Age, C" &
            "ontactNumber, EmailID, Salary FROM Doctor WHERE (DocID = @DocID)"
        Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocName", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Specialisation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialisation", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Qualification", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qualification", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Salary", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 0, "Salary", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DocName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DocName", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Gender", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Gender", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Specialisation", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Specialisation", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Qualification", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Qualification", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Age", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Age", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ContactNumber", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactNumber", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EmailID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Salary", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 7, 0, "Salary", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DocID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DocID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitConnection()
        Me._connection = New Global.System.Data.SqlClient.SqlConnection()
        Me._connection.ConnectionString = Global.Hospital_Management.My.MySettings.Default.HospitalConnectionString1
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Sub InitCommandCollection()
        Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
        Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
        Me._commandCollection(0).Connection = Me.Connection
        Me._commandCollection(0).CommandText = "SELECT * FROM Doctor"
        Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)>
    Public Overridable Overloads Function Fill(ByVal dataTable As HospitalDataSet1.DoctorDataTable) As Integer
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        If (Me.ClearBeforeFill = True) Then
            dataTable.Clear
        End If
        Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
        Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)>
    Public Overridable Overloads Function GetData() As HospitalDataSet1.DoctorDataTable
        Me.Adapter.SelectCommand = Me.CommandCollection(0)
        Dim dataTable As HospitalDataSet1.DoctorDataTable = New HospitalDataSet1.DoctorDataTable()
        Me.Adapter.Fill(dataTable)
        Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataTable As HospitalDataSet1.DoctorDataTable) As Integer
        Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataSet As HospitalDataSet1) As Integer
        Return Me.Adapter.Update(dataSet, "Doctor")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
        Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)>
    Public Overridable Overloads Function Delete(ByVal Original_DocID As Integer, ByVal Original_DocName As String, ByVal Original_Gender As String, ByVal Original_Specialisation As String, ByVal Original_Qualification As String, ByVal Original_Age As Integer, ByVal Original_ContactNumber As String, ByVal Original_EmailID As String, ByVal Original_Salary As Decimal) As Integer
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DocID, Integer)
        If (Original_DocName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_DocName")
        Else
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DocName, String)
        End If
        If (Original_Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Gender")
        Else
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Gender, String)
        End If
        If (Original_Specialisation Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Specialisation")
        Else
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Specialisation, String)
        End If
        If (Original_Qualification Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Qualification")
        Else
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Qualification, String)
        End If
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Age, Integer)
        If (Original_ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_ContactNumber")
        Else
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ContactNumber, String)
        End If
        If (Original_EmailID Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_EmailID")
        Else
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_EmailID, String)
        End If
        Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Salary, Decimal)
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
        If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.DeleteCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.DeleteCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)>
    Public Overridable Overloads Function Insert(ByVal DocName As String, ByVal Gender As String, ByVal Specialisation As String, ByVal Qualification As String, ByVal Age As Integer, ByVal ContactNumber As String, ByVal EmailID As String, ByVal Salary As Decimal) As Integer
        If (DocName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("DocName")
        Else
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DocName, String)
        End If
        If (Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Gender")
        Else
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(Gender, String)
        End If
        If (Specialisation Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Specialisation")
        Else
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Specialisation, String)
        End If
        If (Qualification Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Qualification")
        Else
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Qualification, String)
        End If
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(Age, Integer)
        If (ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("ContactNumber")
        Else
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(ContactNumber, String)
        End If
        If (EmailID Is Nothing) Then
            Throw New Global.System.ArgumentNullException("EmailID")
        Else
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(EmailID, String)
        End If
        Me.Adapter.InsertCommand.Parameters(7).Value = CType(Salary, Decimal)
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
        If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.InsertCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.InsertCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(
                ByVal DocName As String,
                ByVal Gender As String,
                ByVal Specialisation As String,
                ByVal Qualification As String,
                ByVal Age As Integer,
                ByVal ContactNumber As String,
                ByVal EmailID As String,
                ByVal Salary As Decimal,
                ByVal Original_DocID As Integer,
                ByVal Original_DocName As String,
                ByVal Original_Gender As String,
                ByVal Original_Specialisation As String,
                ByVal Original_Qualification As String,
                ByVal Original_Age As Integer,
                ByVal Original_ContactNumber As String,
                ByVal Original_EmailID As String,
                ByVal Original_Salary As Decimal,
                ByVal DocID As Integer) As Integer
        If (DocName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("DocName")
        Else
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DocName, String)
        End If
        If (Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Gender")
        Else
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Gender, String)
        End If
        If (Specialisation Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Specialisation")
        Else
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Specialisation, String)
        End If
        If (Qualification Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Qualification")
        Else
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Qualification, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Age, Integer)
        If (ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("ContactNumber")
        Else
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ContactNumber, String)
        End If
        If (EmailID Is Nothing) Then
            Throw New Global.System.ArgumentNullException("EmailID")
        Else
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(EmailID, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Salary, Decimal)
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_DocID, Integer)
        If (Original_DocName Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_DocName")
        Else
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DocName, String)
        End If
        If (Original_Gender Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Gender")
        Else
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Gender, String)
        End If
        If (Original_Specialisation Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Specialisation")
        Else
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Specialisation, String)
        End If
        If (Original_Qualification Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_Qualification")
        Else
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Qualification, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Age, Integer)
        If (Original_ContactNumber Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_ContactNumber")
        Else
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ContactNumber, String)
        End If
        If (Original_EmailID Is Nothing) Then
            Throw New Global.System.ArgumentNullException("Original_EmailID")
        Else
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_EmailID, String)
        End If
        Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Salary, Decimal)
        Me.Adapter.UpdateCommand.Parameters(17).Value = CType(DocID, Integer)
        Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
        If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                    <> Global.System.Data.ConnectionState.Open) Then
            Me.Adapter.UpdateCommand.Connection.Open
        End If
        Try
            Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
            Return returnValue
        Finally
            If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                Me.Adapter.UpdateCommand.Connection.Close
            End If
        End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)>
    Public Overridable Overloads Function Update(
                ByVal DocName As String,
                ByVal Gender As String,
                ByVal Specialisation As String,
                ByVal Qualification As String,
                ByVal Age As Integer,
                ByVal ContactNumber As String,
                ByVal EmailID As String,
                ByVal Salary As Decimal,
                ByVal Original_DocID As Integer,
                ByVal Original_DocName As String,
                ByVal Original_Gender As String,
                ByVal Original_Specialisation As String,
                ByVal Original_Qualification As String,
                ByVal Original_Age As Integer,
                ByVal Original_ContactNumber As String,
                ByVal Original_EmailID As String,
                ByVal Original_Salary As Decimal) As Integer
        Return Me.Update(DocName, Gender, Specialisation, Qualification, Age, ContactNumber, EmailID, Salary, Original_DocID, Original_DocName, Original_Gender, Original_Specialisation, Original_Qualification, Original_Age, Original_ContactNumber, Original_EmailID, Original_Salary, Original_DocID)
    End Function
End Class

'''<summary>
'''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
'''</summary>
<Global.System.ComponentModel.DesignerCategoryAttribute("code"),
 Global.System.ComponentModel.ToolboxItem(True),
 Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" &
    "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>
Partial Public Class TableAdapterManager
    Inherits Global.System.ComponentModel.Component

    Private _updateOrder As UpdateOrderOption

    Private _patientsTableAdapter As PatientsTableAdapter

    Private _usersTableAdapter As UsersTableAdapter

    Private _doctorTableAdapter As DoctorTableAdapter

    Private _backupDataSetBeforeUpdate As Boolean

    Private _connection As Global.System.Data.IDbConnection

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Property UpdateOrder() As UpdateOrderOption
        Get
            Return Me._updateOrder
        End Get
        Set
            Me._updateOrder = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
        "a", "System.Drawing.Design.UITypeEditor")>
    Public Property PatientsTableAdapter() As PatientsTableAdapter
        Get
            Return Me._patientsTableAdapter
        End Get
        Set
            Me._patientsTableAdapter = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
        "a", "System.Drawing.Design.UITypeEditor")>
    Public Property UsersTableAdapter() As UsersTableAdapter
        Get
            Return Me._usersTableAdapter
        End Get
        Set
            Me._usersTableAdapter = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" &
        "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" &
        "a", "System.Drawing.Design.UITypeEditor")>
    Public Property DoctorTableAdapter() As DoctorTableAdapter
        Get
            Return Me._doctorTableAdapter
        End Get
        Set
            Me._doctorTableAdapter = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Property BackupDataSetBeforeUpdate() As Boolean
        Get
            Return Me._backupDataSetBeforeUpdate
        End Get
        Set
            Me._backupDataSetBeforeUpdate = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False)>
    Public Property Connection() As Global.System.Data.IDbConnection
        Get
            If (Not (Me._connection) Is Nothing) Then
                Return Me._connection
            End If
            If ((Not (Me._patientsTableAdapter) Is Nothing) _
                        AndAlso (Not (Me._patientsTableAdapter.Connection) Is Nothing)) Then
                Return Me._patientsTableAdapter.Connection
            End If
            If ((Not (Me._usersTableAdapter) Is Nothing) _
                        AndAlso (Not (Me._usersTableAdapter.Connection) Is Nothing)) Then
                Return Me._usersTableAdapter.Connection
            End If
            If ((Not (Me._doctorTableAdapter) Is Nothing) _
                        AndAlso (Not (Me._doctorTableAdapter.Connection) Is Nothing)) Then
                Return Me._doctorTableAdapter.Connection
            End If
            Return Nothing
        End Get
        Set
            Me._connection = Value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0"),
     Global.System.ComponentModel.Browsable(False)>
    Public ReadOnly Property TableAdapterInstanceCount() As Integer
        Get
            Dim count As Integer = 0
            If (Not (Me._patientsTableAdapter) Is Nothing) Then
                count = (count + 1)
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                count = (count + 1)
            End If
            If (Not (Me._doctorTableAdapter) Is Nothing) Then
                count = (count + 1)
            End If
            Return count
        End Get
    End Property

    '''<summary>
    '''Update rows in top-down order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function UpdateUpdatedRows(ByVal dataSet As HospitalDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
        Dim result As Integer = 0
        If (Not (Me._patientsTableAdapter) Is Nothing) Then
            Dim updatedRows() As Global.System.Data.DataRow = dataSet.Patients.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
            updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
            If ((Not (updatedRows) Is Nothing) _
                        AndAlso (0 < updatedRows.Length)) Then
                result = (result + Me._patientsTableAdapter.Update(updatedRows))
                allChangedRows.AddRange(updatedRows)
            End If
        End If
        If (Not (Me._usersTableAdapter) Is Nothing) Then
            Dim updatedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
            updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
            If ((Not (updatedRows) Is Nothing) _
                        AndAlso (0 < updatedRows.Length)) Then
                result = (result + Me._usersTableAdapter.Update(updatedRows))
                allChangedRows.AddRange(updatedRows)
            End If
        End If
        If (Not (Me._doctorTableAdapter) Is Nothing) Then
            Dim updatedRows() As Global.System.Data.DataRow = dataSet.Doctor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
            updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
            If ((Not (updatedRows) Is Nothing) _
                        AndAlso (0 < updatedRows.Length)) Then
                result = (result + Me._doctorTableAdapter.Update(updatedRows))
                allChangedRows.AddRange(updatedRows)
            End If
        End If
        Return result
    End Function

    '''<summary>
    '''Insert rows in top-down order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function UpdateInsertedRows(ByVal dataSet As HospitalDataSet1, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
        Dim result As Integer = 0
        If (Not (Me._patientsTableAdapter) Is Nothing) Then
            Dim addedRows() As Global.System.Data.DataRow = dataSet.Patients.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
            If ((Not (addedRows) Is Nothing) _
                        AndAlso (0 < addedRows.Length)) Then
                result = (result + Me._patientsTableAdapter.Update(addedRows))
                allAddedRows.AddRange(addedRows)
            End If
        End If
        If (Not (Me._usersTableAdapter) Is Nothing) Then
            Dim addedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
            If ((Not (addedRows) Is Nothing) _
                        AndAlso (0 < addedRows.Length)) Then
                result = (result + Me._usersTableAdapter.Update(addedRows))
                allAddedRows.AddRange(addedRows)
            End If
        End If
        If (Not (Me._doctorTableAdapter) Is Nothing) Then
            Dim addedRows() As Global.System.Data.DataRow = dataSet.Doctor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
            If ((Not (addedRows) Is Nothing) _
                        AndAlso (0 < addedRows.Length)) Then
                result = (result + Me._doctorTableAdapter.Update(addedRows))
                allAddedRows.AddRange(addedRows)
            End If
        End If
        Return result
    End Function

    '''<summary>
    '''Delete rows in bottom-up order.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function UpdateDeletedRows(ByVal dataSet As HospitalDataSet1, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
        Dim result As Integer = 0
        If (Not (Me._doctorTableAdapter) Is Nothing) Then
            Dim deletedRows() As Global.System.Data.DataRow = dataSet.Doctor.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
            If ((Not (deletedRows) Is Nothing) _
                        AndAlso (0 < deletedRows.Length)) Then
                result = (result + Me._doctorTableAdapter.Update(deletedRows))
                allChangedRows.AddRange(deletedRows)
            End If
        End If
        If (Not (Me._usersTableAdapter) Is Nothing) Then
            Dim deletedRows() As Global.System.Data.DataRow = dataSet.Users.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
            If ((Not (deletedRows) Is Nothing) _
                        AndAlso (0 < deletedRows.Length)) Then
                result = (result + Me._usersTableAdapter.Update(deletedRows))
                allChangedRows.AddRange(deletedRows)
            End If
        End If
        If (Not (Me._patientsTableAdapter) Is Nothing) Then
            Dim deletedRows() As Global.System.Data.DataRow = dataSet.Patients.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
            If ((Not (deletedRows) Is Nothing) _
                        AndAlso (0 < deletedRows.Length)) Then
                result = (result + Me._patientsTableAdapter.Update(deletedRows))
                allChangedRows.AddRange(deletedRows)
            End If
        End If
        Return result
    End Function

    '''<summary>
    '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
        If ((updatedRows Is Nothing) _
                    OrElse (updatedRows.Length < 1)) Then
            Return updatedRows
        End If
        If ((allAddedRows Is Nothing) _
                    OrElse (allAddedRows.Count < 1)) Then
            Return updatedRows
        End If
        Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
        Dim i As Integer = 0
        Do While (i < updatedRows.Length)
            Dim row As Global.System.Data.DataRow = updatedRows(i)
            If (allAddedRows.Contains(row) = False) Then
                realUpdatedRows.Add(row)
            End If
            i = (i + 1)
        Loop
        Return realUpdatedRows.ToArray
    End Function

    '''<summary>
    '''Update all changes to the dataset.
    '''</summary>
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Overridable Function UpdateAll(ByVal dataSet As HospitalDataSet1) As Integer
        If (dataSet Is Nothing) Then
            Throw New Global.System.ArgumentNullException("dataSet")
        End If
        If (dataSet.HasChanges = False) Then
            Return 0
        End If
        If ((Not (Me._patientsTableAdapter) Is Nothing) _
                    AndAlso (Me.MatchTableAdapterConnection(Me._patientsTableAdapter.Connection) = False)) Then
            Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                    "tring.")
        End If
        If ((Not (Me._usersTableAdapter) Is Nothing) _
                    AndAlso (Me.MatchTableAdapterConnection(Me._usersTableAdapter.Connection) = False)) Then
            Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                    "tring.")
        End If
        If ((Not (Me._doctorTableAdapter) Is Nothing) _
                    AndAlso (Me.MatchTableAdapterConnection(Me._doctorTableAdapter.Connection) = False)) Then
            Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" &
                    "tring.")
        End If
        Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
        If (workConnection Is Nothing) Then
            Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" &
                    "ger TableAdapter property to a valid TableAdapter instance.")
        End If
        Dim workConnOpened As Boolean = False
        If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                    = Global.System.Data.ConnectionState.Broken) Then
            workConnection.Close
        End If
        If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
            workConnection.Open
            workConnOpened = True
        End If
        Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
        If (workTransaction Is Nothing) Then
            Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" &
                    "ctions or the current state is not allowing the transaction to begin.")
        End If
        Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
        Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
        Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
        Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
        Dim result As Integer = 0
        Dim backupDataSet As Global.System.Data.DataSet = Nothing
        If Me.BackupDataSetBeforeUpdate Then
            backupDataSet = New Global.System.Data.DataSet()
            backupDataSet.Merge(dataSet)
        End If
        Try
            '---- Prepare for update -----------
            '
            If (Not (Me._patientsTableAdapter) Is Nothing) Then
                revertConnections.Add(Me._patientsTableAdapter, Me._patientsTableAdapter.Connection)
                Me._patientsTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                Me._patientsTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                If Me._patientsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                    Me._patientsTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                    adaptersWithAcceptChangesDuringUpdate.Add(Me._patientsTableAdapter.Adapter)
                End If
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                revertConnections.Add(Me._usersTableAdapter, Me._usersTableAdapter.Connection)
                Me._usersTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                Me._usersTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                If Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                    Me._usersTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                    adaptersWithAcceptChangesDuringUpdate.Add(Me._usersTableAdapter.Adapter)
                End If
            End If
            If (Not (Me._doctorTableAdapter) Is Nothing) Then
                revertConnections.Add(Me._doctorTableAdapter, Me._doctorTableAdapter.Connection)
                Me._doctorTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                Me._doctorTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                If Me._doctorTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                    Me._doctorTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                    adaptersWithAcceptChangesDuringUpdate.Add(Me._doctorTableAdapter.Adapter)
                End If
            End If
            '
            '---- Perform updates -----------
            '
            If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
            Else
                result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
            End If
            result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
            '
            '---- Commit updates -----------
            '
            workTransaction.Commit
            If (0 < allAddedRows.Count) Then
                Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                allAddedRows.CopyTo(rows)
                Dim i As Integer = 0
                Do While (i < rows.Length)
                    Dim row As Global.System.Data.DataRow = rows(i)
                    row.AcceptChanges
                    i = (i + 1)
                Loop
            End If
            If (0 < allChangedRows.Count) Then
                Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                allChangedRows.CopyTo(rows)
                Dim i As Integer = 0
                Do While (i < rows.Length)
                    Dim row As Global.System.Data.DataRow = rows(i)
                    row.AcceptChanges
                    i = (i + 1)
                Loop
            End If
        Catch ex As Global.System.Exception
            workTransaction.Rollback
            '---- Restore the dataset -----------
            If Me.BackupDataSetBeforeUpdate Then
                Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                dataSet.Clear
                dataSet.Merge(backupDataSet)
            Else
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        row.SetAdded
                        i = (i + 1)
                    Loop
                End If
            End If
            Throw ex
        Finally
            If workConnOpened Then
                workConnection.Close
            End If
            If (Not (Me._patientsTableAdapter) Is Nothing) Then
                Me._patientsTableAdapter.Connection = CType(revertConnections(Me._patientsTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                Me._patientsTableAdapter.Transaction = Nothing
            End If
            If (Not (Me._usersTableAdapter) Is Nothing) Then
                Me._usersTableAdapter.Connection = CType(revertConnections(Me._usersTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                Me._usersTableAdapter.Transaction = Nothing
            End If
            If (Not (Me._doctorTableAdapter) Is Nothing) Then
                Me._doctorTableAdapter.Connection = CType(revertConnections(Me._doctorTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                Me._doctorTableAdapter.Transaction = Nothing
            End If
            If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                Dim i As Integer = 0
                Do While (i < adapters.Length)
                    Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                    adapter.AcceptChangesDuringUpdate = True
                    i = (i + 1)
                Loop
            End If
        End Try
        Return result
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
        Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
        If (Not (Me._connection) Is Nothing) Then
            Return True
        End If
        If ((Me.Connection Is Nothing) _
                    OrElse (inputConnection Is Nothing)) Then
            Return True
        End If
        If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
            Return True
        End If
        Return False
    End Function

    '''<summary>
    '''Update Order Option
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Public Enum UpdateOrderOption

        InsertUpdateDelete = 0

        UpdateInsertDelete = 1
    End Enum

    '''<summary>
    '''Used to sort self-referenced table's rows
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
    Private Class SelfReferenceComparer
        Inherits Object
        Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

        Private _relation As Global.System.Data.DataRelation

        Private _childFirst As Integer

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            MyBase.New
            Me._relation = relation
            If childFirst Then
                Me._childFirst = -1
            Else
                Me._childFirst = 1
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
            Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
            Dim root As Global.System.Data.DataRow = row
            distance = 0

            Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
            traversedRows(row) = row

            Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

            Do While ((Not (parent) Is Nothing) _
                        AndAlso (traversedRows.ContainsKey(parent) = False))
                distance = (distance + 1)
                root = parent
                traversedRows(parent) = parent
                parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

            Loop

            If (distance = 0) Then
                traversedRows.Clear
                traversedRows(row) = row
                parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                Do While ((Not (parent) Is Nothing) _
                            AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                Loop
            End If

            Return root
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")>
        Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
            If Object.ReferenceEquals(row1, row2) Then
                Return 0
            End If
            If (row1 Is Nothing) Then
                Return -1
            End If
            If (row2 Is Nothing) Then
                Return 1
            End If

            Dim distance1 As Integer = 0
            Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

            Dim distance2 As Integer = 0
            Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

            If Object.ReferenceEquals(root1, root2) Then
                Return (Me._childFirst * distance1.CompareTo(distance2))
            Else
                Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing) _
                                AndAlso (Not (root2.Table) Is Nothing)))
                If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                    Return -1
                Else
                    Return 1
                End If
            End If
        End Function
    End Class
End Class
End Namespace
